const { Scenes, Markup } = require("telegraf");
const { WizardScene } = Scenes;
const { Get_ChatID } = require("../DataBase/Request/User");

const inGroup = Markup.inlineKeyboard([
  [Markup.button.callback("üì¢ –û–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", "BROADCAST_ALL")],
  [Markup.button.callback("üë• –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã", "BROADCAST_GROUP")],
  [Markup.button.callback("üßë‚Äçüíª –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", "HELP")],
]);

// –•–µ–ª–ø–µ—Ä: —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
async function deletePrevMessage(ctx) {
  const prevId = ctx.wizard.state.lastBotMessageId;
  if (prevId) {
    try {
      await ctx.deleteMessage(prevId);
    } catch (e) {
      console.log(e, " - –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
    }
  }
}

// ------------------- –®–∞–≥ 1: –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è -------------------
const step1 = async (ctx) => {
  await deletePrevMessage(ctx);

  const sent = await ctx.reply(
    "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n<i>–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</i>",
    { parse_mode: "HTML" }
  );

  ctx.wizard.state.lastBotMessageId = sent.message_id;
  return ctx.wizard.next();
};

// ------------------- –®–∞–≥ 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ -------------------
const step2 = async (ctx) => {
  await deletePrevMessage(ctx);

  if (!ctx.message?.text) {
    const sent = await ctx.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!");
    ctx.wizard.state.lastBotMessageId = sent.message_id;
    return;
  }

  ctx.wizard.state.broadcastMessage = ctx.message.text;

  const sent = await ctx.reply(
    `üì® <b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n${ctx.wizard.state.broadcastMessage}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É?`,
    {
      parse_mode: "HTML",
      ...Markup.inlineKeyboard([
        [Markup.button.callback("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "CONFIRM_SEND")],
        [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "CANCEL_SEND")],
      ]),
    }
  );

  ctx.wizard.state.lastBotMessageId = sent.message_id;
  return ctx.wizard.next();
};

// ------------------- –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ -------------------
const step3 = async (ctx) => {
  if (!ctx.callbackQuery) return;

  const action = ctx.callbackQuery.data;
  await ctx.answerCbQuery().catch(() => {});;
  await deletePrevMessage(ctx);

  if (action === "CONFIRM_SEND") {
    const { success, chatIds } = await Get_ChatID();
    if (!success) {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤.");
      return ctx.scene.leave();
    }

    let count = 0;
    for (const id of chatIds) {
      try {
        await ctx.telegram.sendMessage(id, ctx.wizard.state.broadcastMessage, {
          parse_mode: "HTML",
        });
        count++;
      } catch (e) {
        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", e);
      }
    }

    await ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>${count}</b> —Å–æ–æ–±—â–µ–Ω–∏–π.`, {
      parse_mode: "HTML",...inGroup
    });
  } else {
    await ctx.reply("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",{...inGroup});
  }

  return ctx.scene.leave();
};

const broadcastWizard = new WizardScene(
  "BROADCAST_ALL",
  step1,
  step2,
  step3
);

module.exports = broadcastWizard;
