const { Scenes, Markup } = require("telegraf");
const { WizardScene } = Scenes;
const { getGroups } = require("../API/Requests");
const { SetGroup } = require("../DataBase/Request/User");

const inGroup = Markup.inlineKeyboard([
  [
    Markup.button.callback("üìÖ –ü–∞—Ä—ã —Å–µ–≥–æ–¥–Ω—è", "SUBJECT_TODAY"),
    Markup.button.callback("üìÜ –ü–∞—Ä—ã –∑–∞–≤—Ç—Ä–∞", "SUBJECT_TOMORROW"),
  ],
  [Markup.button.callback("üë• –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", "SET_COURSE")],
  [Markup.button.callback("üßë‚Äçüíª –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", "HELP")],
]);

// –•–µ–ª–ø–µ—Ä: —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
async function deletePrevMessage(ctx) {
  const prevId = ctx.wizard.state.lastBotMessageId;
  if (prevId) {
    try {
      await ctx.deleteMessage(prevId);
    } catch (e) {
      console.log(e, " - –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
    }
  }
}

// ------------------- –®–∞–≥ 1: –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞ -------------------
const step1 = async (ctx) => {
  await deletePrevMessage(ctx);

  const sent = await ctx.reply(
    "üìò –ù–∞ –∫–∞–∫–æ–º –≤—ã –∫—É—Ä—Å–µ? üéì",
    Markup.keyboard([["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£"], ["‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]])
      .oneTime()
      .resize()
  );

  ctx.wizard.state.lastBotMessageId = sent.message_id;
  return ctx.wizard.next();
};

// ------------------- –®–∞–≥ 2: –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã -------------------
const step2 = async (ctx) => {
  const text = String(ctx.message.text).trim();

  if (text.includes("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")) {
    await deletePrevMessage(ctx);

    const sent = await ctx.reply(
      "‚è≠Ô∏è –ö—É—Ä—Å –ø—Ä–æ–ø—É—â–µ–Ω. –í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /setcourse ‚öôÔ∏è",
      Markup.removeKeyboard()
    );

    ctx.wizard.state.lastBotMessageId = sent.message_id;
    return ctx.scene.leave();
  }

  if (/^[1-5]$/.test(text) || /^[1-5]Ô∏è‚É£$/.test(text)) {
    ctx.session.course = text.replace("Ô∏è‚É£", "");
    const groupsData = await getGroups(ctx.session.course);
    if (!groupsData.success) {
      const text = `
üÜò *–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–∫–∞?*

–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É:
üë§ @O101O1O1O

–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ! ‚ö°

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:
`;

      await ctx.reply(text, { ...inGroup, parse_mode: "Markdown" });
      return ctx.scene.leave();
    }
    ctx.session.availableGroups = groupsData.group.groups;

    await deletePrevMessage(ctx);

    const keyBoard = Markup.inlineKeyboard(
      groupsData.group.groups.map((group) => [
        Markup.button.callback(`üìö ${group}`, `GROUP_${group}`),
      ])
    );

    const sent = await ctx.reply("üë• –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:", keyBoard);
    ctx.wizard.state.lastBotMessageId = sent.message_id;
    return ctx.wizard.next();
  }

  return ctx.reply(
    '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É "1Ô∏è‚É£‚Äì5Ô∏è‚É£" –∏–ª–∏ "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å".'
  );
};

// ------------------- –®–∞–≥ 3: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã -------------------
const finishStep = async (ctx) => {
  const data = ctx.update.callback_query?.data;

  if (data === "BACK") {
    await ctx.answerCbQuery().catch(() => {});;
    return ctx.wizard.selectStep(0); // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞
  }

  const match = data.match(/^GROUP_(.+)$/);
  if (!match) return ctx.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–Ω–æ–ø–∫–æ–π.");

  const group = match[1];
  const chatId = ctx.chat.id;
  const fullname = ctx.from.first_name + " " + (ctx.from.last_name || "");
  await SetGroup({ chatId, fullname, group });

  await ctx.answerCbQuery().catch(() => {});;
  await deletePrevMessage(ctx);

  const sent = await ctx.reply(`‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: <b>${group}</b> üéâ`, {
    parse_mode: "HTML",
  });

  await ctx.reply(`‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, inGroup);

  ctx.wizard.state.lastBotMessageId = sent.message_id;
  return ctx.scene.leave();
};

const setCourseWizard = new WizardScene("SET_COURSE", step1, step2, finishStep);

module.exports = setCourseWizard;
