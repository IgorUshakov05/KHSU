const { GetUser } = require("../DataBase/Request/User");
const { Temporal } = require("temporal-polyfill");
const { getSchedule } = require("../API/Schedule");
const { Markup } = require("telegraf");

const inGroup = Markup.inlineKeyboard([
  [Markup.button.callback("üìÜ –ü–∞—Ä—ã –∑–∞–≤—Ç—Ä–∞", "SUBJECT_TOMORROW")],
  [Markup.button.callback("üë• –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", "SET_COURSE")],
  [Markup.button.callback("üßë‚Äçüíª –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", "HELP")],
]);

module.exports = (bot) => {
  bot.action("SUBJECT_TODAY", async (ctx) => {
    try {
      await ctx.answerCbQuery("–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...");

      const chatId = ctx.chat.id;
      const user = await GetUser(chatId);

      const today = Temporal.Now.plainDateISO();
      const formatted =
        String(today.day).padStart(2, "0") +
        "." +
        String(today.month).padStart(2, "0") +
        "." +
        today.year;

      console.log("–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞:", formatted);

      if (!user?.group) {
        return ctx.reply(
          "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ",
          Markup.inlineKeyboard([
            [Markup.button.callback("üë• –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É", "SET_COURSE")],
          ])
        );
      }

      const schedule = await getSchedule(user.group, formatted);
      console.log(schedule);
      if (!schedule.success) {
        throw Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è");
      }
      if (!schedule || !schedule.lessons || schedule.lessons.length === 0) {
        ctx.reply("üì≠ –°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç!");
        return ctx.sendSticker(
          "CAACAgIAAxkBAAICqGjNeQkv44HyJyKFfcBklUfaKMs2AAJYAAPkoM4HrNDsfmL1_f82BA"
        );
      }

      let text = `üìÖ –ü–∞—Ä—ã —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≥—Ä—É–ø–ø—ã <b>${user.group}</b>:\n\n`;

      schedule.lessons.forEach((lesson) => {
        text +=
          `${lesson.time}. ${lesson.subject} (${lesson.type_lesson})\n` +
          `üë®‚Äçüè´ ${lesson.teacher}\n` +
          `üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: ${lesson.auditory}\n` +
          `üïõ –í—Ä–µ–º—è: ${lesson.time_start} - ${lesson.time_end}\n\n`;
      });

      await ctx.reply(text, { parse_mode: "HTML", ...inGroup });
    } catch (error) {
      await ctx.answerCbQuery().catch(() => {});;
      const text = `
üÜò *–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?*

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É:
üë§ @O101O1O1O

–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ! ‚ö°

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:
`;

      await ctx.reply(text, { ...inGroup, parse_mode: "Markdown" });
    }
  });
};
