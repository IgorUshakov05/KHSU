require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const { Scenes, session } = require("telegraf");
const mongoose = require("mongoose");
const setCourseWizard = require("./Scene/SelectGroup");
const spamAll = require("./Scene/SendNews");
const spamGroup = require("./Scene/SendNewsGroup");

const {
  RegisterUser,
  SetGroup,
  Set_Admin,
} = require("./DataBase/Request/User");
const stage = new Scenes.Stage([setCourseWizard, spamAll, spamGroup]);

const bot = new Telegraf(process.env.BOT_TOKEN);
const stickers = [
  "CAACAgIAAxkBAAIBkmjNPXna6z2fF7JliaHTy_mlLbXNAAJ7ZgACi9ZgSJ8UvAWRSoHqNgQ",
  "CAACAgIAAxkBAAIBlGjNPXyr62I9x4x2yt17by0sO_1eAAJvcgAC-qpgSFPk7woHnrSNNgQ",
  "CAACAgIAAxkBAAIBlmjNPY15vdADiPOAyTHYgkptCH_CAALbVgACDw9oSHBUChOcKuM-NgQ",
  "CAACAgIAAxkBAAIBmGjNPZT5cA6bs07VkTJ-1qzVoVg4AAJ6ZgACk_lhSGKpRQNWOfuNNgQ",
  "CAACAgIAAxkBAAIBmmjNPZ7slWue0vR6RFlK7b5hSEIUAAJBaQACZ35hSA3z4hAvmDxVNgQ",
];

async function sendRandomSticker(ctx) {
  const randomIndex = Math.floor(Math.random() * stickers.length);
  const stickerId = stickers[randomIndex];
  await ctx.sendSticker(stickerId);
}
bot.use(session());
bot.use(stage.middleware());

const inGroup = Markup.inlineKeyboard([
  [
    Markup.button.callback("üìÖ –ü–∞—Ä—ã —Å–µ–≥–æ–¥–Ω—è", "SUBJECT_TODAY"),
    Markup.button.callback("üìÜ –ü–∞—Ä—ã –∑–∞–≤—Ç—Ä–∞", "SUBJECT_TOMORROW"),
  ],
  [Markup.button.callback("üë• –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", "SET_COURSE")],
  [Markup.button.callback("üßë‚Äçüíª –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", "HELP")],
]);

bot.start(async (ctx) => {
  const chat_id = ctx.chat.id;
  const fullname = `${ctx.from.first_name || ""} ${
    ctx.from.last_name || ""
  }`.trim();

  let save_user = await RegisterUser({ chat_id, fullname });
  console.log(save_user);

  // –°—Ç–∏–∫–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  await sendRandomSticker(ctx);
  await ctx.reply(
    `${save_user.message}`,
    !!save_user.user.group
      ? inGroup
      : Markup.inlineKeyboard([
          Markup.button.callback(
            `${save_user.success ? "–£–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É" : "–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"}`,
            "SET_COURSE"
          ),
        ])
  );
});

bot.action(/GROUP_(.+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery().catch(() => {});
    const group = ctx.match[1];
    const chatId = ctx.chat.id;
    const result = await SetGroup({ chatId, group });

    // –°—Ç–∏–∫–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    await ctx.sendSticker(
      "CAACAgIAAxkBAAEEd2Fj8KmVt0K1Zx2pXGRK1b0Y9XcUigACVAADVp29CKHhKdN9SVXrHwQ"
    ); // –ø—Ä–∏–º–µ—Ä —Å—Ç–∏–∫–µ—Ä–∞

    await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: ${group}\n${result.message}`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã:", err);
    await ctx.reply(
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});

// –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∫—É—Ä—Å
bot.action("SET_COURSE", async (ctx) => {
  ctx.answerCbQuery().catch(() => {});
  await ctx.scene.enter("SET_COURSE");
});

// –û–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
bot.action("BROADCAST_ALL", async (ctx) => {
  ctx.answerCbQuery().catch(() => {});
  await ctx.scene.enter("BROADCAST_ALL");
});

// –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
bot.action("BROADCAST_GROUP", async (ctx) => {
  ctx.answerCbQuery().catch(() => {});
  await ctx.scene.enter("BROADCAST_GROUP");
});

bot.command("setcourse", async (ctx) => {
  await ctx.scene.enter("SET_COURSE");
});

// –î–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥—ã
bot.command(process.env.ADMIN_COMMAND, async (ctx) => {
  const chat_id = ctx.chat.id;
  await Set_Admin(chat_id);

  await ctx.reply(
    `‚ö°Ô∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> ‚ö°Ô∏è\n
üõ† –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏.\n
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá`,
    {
      parse_mode: "HTML",
      ...Markup.inlineKeyboard([
        [Markup.button.callback("üì¢ –û–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", "BROADCAST_ALL")],
        [Markup.button.callback("üë• –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã", "BROADCAST_GROUP")],
      ]),
    }
  );
});
async function connectDB() {
  try {
    let uri =
      process.env.MODE === "DEV"
        ? process.env.MONGO_URI_DEV
        : process.env.MONGO_URI_PROD;
    console.log(uri);
    await mongoose.connect(uri);
    console.log("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", err.message);
    process.exit(1);
  }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
require("./Actions/Schedule")(bot);
require("./Actions/Schedule_Tommorow")(bot);

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞
require("./Actions/Help")(bot);
bot.on("message", async (ctx) => {
  const { chat, message_id, from } = ctx.message;

  console.log(
    `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${from.first_name} (${
      from.username || "–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
    })`
  );
  if (ctx.message.text) console.log("–¢–µ–∫—Å—Ç:", ctx.message.text);
  if (ctx.message.sticker)
    console.log("–°—Ç–∏–∫–µ—Ä file_id:", ctx.message.sticker.file_id);
  if (ctx.message.photo)
    console.log(
      "–§–æ—Ç–æ:",
      ctx.message.photo.map((p) => p.file_id)
    );

  try {
    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ DEV_CHAT_ID —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    await ctx.telegram.forwardMessage(
      process.env.DEV_CHAT_ID, // –∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
      chat.id, // –æ—Ç–∫—É–¥–∞
      message_id // ID —Å–æ–æ–±—â–µ–Ω–∏—è
    );
    console.log("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ DEV");
  } catch (e) {
    console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ DEV:", e);
  }
});
// –ó–∞–ø—É—Å–∫
(async () => {
  console.log("–ù–∞—á–∞–ª–æ –∑–∞–ø—É—Å–∫–∞");

  await connectDB();

  await bot.launch();
  console.log("ü§ñ Bot started (polling).");
})();

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
